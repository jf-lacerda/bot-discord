"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.interpolateAngle = exports.interpolate = exports.ordPath = exports.square = exports.mod = exports.rad2deg = exports.deg2rad = void 0;
var function_1 = require("fp-ts/function");
var Ord = __importStar(require("fp-ts/Ord"));
var RNEA = __importStar(require("fp-ts/ReadonlyNonEmptyArray"));
exports.deg2rad = Math.PI / 180.0;
exports.rad2deg = 180.0 / Math.PI;
var mod = function (x) {
    return function (y) {
        return ((x % y) + y) % y;
    };
};
exports.mod = mod;
var square = function (x) { return Math.pow(x, 2.0); };
exports.square = square;
var dist = function (_a) {
    var from = _a.from, to = _a.to;
    return Math.abs(to - from);
};
exports.ordPath = Ord.fromCompare(function (a, b) {
    var da = dist(a);
    var db = dist(b);
    if (da === db) {
        return 0;
    }
    return da > db ? 1 : -1;
});
/**
 * Linearly interpolate between two values.
 */
var interpolate = function (fraction) {
    return function (a) {
        return function (b) {
            return a + fraction * (b - a);
        };
    };
};
exports.interpolate = interpolate;
/**
 * Linearly interpolate between two angles. Always take the shortest path
 * along the circle.
 */
var interpolateAngle = function (fraction) {
    return function (a) {
        return function (b) {
            var paths = [
                { from: a, to: b },
                { from: a, to: b + 360.0 },
                { from: a + 360.0, to: b }
            ];
            var shortest = function_1.pipe(paths, RNEA.sort(exports.ordPath), RNEA.head);
            return exports.interpolate(fraction)(shortest.from)(shortest.to);
        };
    };
};
exports.interpolateAngle = interpolateAngle;
//# sourceMappingURL=math.js.map