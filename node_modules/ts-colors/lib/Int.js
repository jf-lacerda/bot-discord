"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toStringAs = exports.fromString = exports.fromStringAs = exports.radix = exports.base36 = exports.hexadecimal = exports.decimal = exports.octal = exports.binary = void 0;
/**
 * @since 0.1.0
 */
var O = __importStar(require("fp-ts/Option"));
/**
 * @since 0.1.0
 */
exports.binary = 2;
/**
 * @since 0.1.0
 */
exports.octal = 8;
/**
 * @since 0.1.0
 */
exports.decimal = 10;
/**
 * @since 0.1.0
 */
exports.hexadecimal = 16;
/**
 * @since 0.1.0
 */
exports.base36 = 36;
/**
 * Create a valid radix value
 *
 * @since 0.1.0
 */
var radix = function (n) {
    return n >= 2 && n <= 36 ? O.some(n) : O.none;
};
exports.radix = radix;
/**
 * Parse a string to an int with a radix
 *
 * @example
 *
 * import * as Int orsfrom 'ts-colors/Int'
 *
 * const s = ''
 *
 * Int.fromStringAs(Int.hexadecimal)(s)
 *
 * @since 0.1.0
 */
var fromStringAs = function (radix) {
    var digits;
    if (radix < 11) {
        digits = '[0-' + (radix - 1).toString() + ']';
    }
    else if (radix === 11) {
        digits = '[0-9a]';
    }
    else {
        digits = '[0-9a-' + String.fromCharCode(86 + radix) + ']';
    }
    var pattern = new RegExp('^[\\+\\-]?' + digits + '+$', 'i');
    return function (s) {
        if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? O.some(i) : O.none;
        }
        return O.none;
    };
};
exports.fromStringAs = fromStringAs;
/**
 * Parse a string to an int
 *
 * @since 0.1.0
 */
exports.fromString = exports.fromStringAs(exports.decimal);
/**
 * @since 0.1.0
 */
var toStringAs = function (r) {
    return function (n) {
        return n.toString(r);
    };
};
exports.toStringAs = toStringAs;
//# sourceMappingURL=Int.js.map