"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mix = exports.evolve = exports.fromHSLA = exports.lch = void 0;
/**
 * CIE LCh, a polar version of [`Lab`](./Lab.ts.html).
 * Note: See documentation for [`xyz`](./XYZ.ts.html). The same restrictions apply here.
 *
 * See: [https://en.wikipedia.org/wiki/Lab_color_space](https://en.wikipedia.org/wiki/Lab_color_space)
 *
 * @since 0.1.5
 */
var function_1 = require("fp-ts/function");
var struct = __importStar(require("fp-ts/struct"));
var Hue_1 = require("./Hue");
var Lab = __importStar(require("./Lab"));
var math_1 = require("./math");
/**
 * @since 0.1.5
 * @category constructors
 */
var lch = function (l, c, h) { return ({
    l: l,
    c: c,
    h: Hue_1.hue(h)
}); };
exports.lch = lch;
/**
 * @since 0.1.5
 * @category constructors
 */
var fromHSLA = function (hsla) {
    var _a = Lab.fromHSLA(hsla), l = _a.l, a = _a.a, b = _a.b;
    var c = Math.sqrt(a * a + b * b);
    var h = Hue_1.clipHue(Math.atan2(b, a) * math_1.rad2deg);
    return exports.lch(l, c, h);
};
exports.fromHSLA = fromHSLA;
/**
 * @since 0.1.5
 */
var evolve = function (t) { return function (c) {
    return function_1.pipe(c, struct.evolve(t), function (_a) {
        var l = _a.l, c = _a.c, h = _a.h;
        return exports.lch(l, c, h);
    });
}; };
exports.evolve = evolve;
/**
 * @since 0.1.5
 */
var mix = function (ratio) {
    return function (a) {
        return function (b) {
            var i = math_1.interpolate(ratio);
            var ia = math_1.interpolateAngle(ratio);
            return function_1.pipe(b, exports.evolve({
                l: i(a.l),
                c: i(a.c),
                h: ia(a.h)
            }));
        };
    };
};
exports.mix = mix;
//# sourceMappingURL=LCh.js.map