"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fromRGBA = exports.clipHue = exports.hue = void 0;
/**
 * @since 0.1.0
 */
var function_1 = require("fp-ts/function");
var number_1 = require("fp-ts/number");
var Ord_1 = require("fp-ts/Ord");
var math_1 = require("./math");
var RGBA = __importStar(require("./RGBA"));
/**
 * A number between `0` and `360` representing the hue of a color in degrees.
 *
 * @since 0.1.5
 */
var hue = function (n) { return exports.clipHue(n); };
exports.hue = hue;
/**
 * Assert that the hue angle is in the interval [0, 360].
 *
 * @since 0.1.0
 */
var clipHue = function (hue) {
    return (Ord_1.between(number_1.Ord)(0, 360)(hue) ? hue : math_1.mod(hue)(360));
};
exports.clipHue = clipHue;
/**
 * @category constructors
 * @since 0.1.5
 */
var fromRGBA = function (rgba) {
    var chroma = RGBA.chroma(rgba);
    var maxChroma = RGBA.maxChroma(rgba);
    var r = rgba.r / 255;
    var g = rgba.g / 255;
    var b = rgba.b / 255;
    var c = chroma / 255;
    var n = function (x) { return exports.hue(60.0 * x); };
    if (chroma === 0) {
        return exports.hue(0);
    }
    if (maxChroma === rgba.r) {
        return function_1.pipe((g - b) / c, function (x) { return math_1.mod(x)(6.0); }, n);
    }
    if (maxChroma === rgba.g) {
        return n((b - r) / c + 2.0);
    }
    return n((r - g) / c + 4.0);
};
exports.fromRGBA = fromRGBA;
//# sourceMappingURL=Hue.js.map